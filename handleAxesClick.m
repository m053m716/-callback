function handleAxesClick(src, evt, data)
%HANDLEAXESCLICK  Callback included with figure userdata so that axes can clicked on.
%
% Syntax:
%   cb.handleAxesClick(src, evt);
%
% Example:
%   ax.ButtonDownFcn = @(src, evt)handleAxesClick(src, evt);
%
% Inputs:
%   src - This ends up being the object that is clicked (i.e. an axes)
%   evt - This is the eventdata generated by the mouse click.
%
% See also: Contents, plot_emg_averages

switch evt.Button
    case 1  % Left-click
        if nargin < 3
            data = src.UserData; 
            if isempty(data)
                data = struct(...
                    'block', 'Zoom', ...
                    'name', src.Parent.Title.String, ...
                    'filtering', get_default_filtering_pars("TMSi", "Array", "Rectified")); 
            end
        end
        newFig = default.figure(sprintf('%s: %s - %s', data.block, data.name, data.filtering.Name));
        newAx = default.axes(newFig, 'XLabel', 'Time (ms)', ...
            'YLabel', 'Amplitude (\muV)', ...
            'Title', sprintf('%s: %s - %s', strrep(data.block, '_', '\_'), ...
                        data.name, get_filtering_label_string(data.filtering)));
        copyobj(src.Children, newAx);        
        set(newFig, 'Position', [0.1 0.1 0.8 0.8]);
        set(src, 'Color', [0.2 0.5 0.8]);
        finfo = strsplit(data.block, '_');
        manual_file_name = fullfile('R:\NMLShare\generated_data\primate\DARPA_N3', finfo{1}, strjoin(finfo(1:4), '_'), finfo{end}, '.single_channels', strcat(data.block, "_", data.name)); 
        set(newFig, 'WindowKeyPressFcn', @(src, evt)cb.handleCommonWindowKeyPresses(src, evt, manual_file_name, false));
        set(newFig, 'DeleteFcn', @(~,~)set(src, 'Color', [1.0 1.0 1.0]));
        
        l = findobj(newAx.Children, 'Tag', 'STA');
        if ~isempty(l)
            set(newAx, 'XLim', [min(l.XData), max(l.XData)]);
            [~, th] = add_sd_threshold(newAx, 6.5);       

            if src.UserData.filtering.Name == "Rectified"
                ylim(newAx, [0, th*2]);
            end
        end
        
        test = arrayfun(@check_display_name, newAx.Children);
        if all(test)
            % Then everything has display name; place legend
            legend(newAx, 'FontName', 'Tahoma', 'TextColor', 'black', 'Location', 'best');
        end 
        
    case 3  % Right-click
        msg = questdlg("Add fiducial indicator?", "Add line?", "Yes", "No", "Yes");
        if strcmp(msg, "No")
            return;
        end
        p = src.Parent;
        c = findobj(get(p, 'Children'), 'Type', 'axes');
        
        x = round(src.CurrentPoint(1, 1));
        for iCh = 1:numel(c)
            xline(c(iCh), x, 'Label', sprintf('t = %d ms', x), ...
                'LabelVerticalAlignment', 'top', ...
                'Color', [0.3 0.5 0.9], 'LineWidth', 1.25, ...
                'LabelOrientation', 'horizontal', ...
                'LineStyle', '-', ...
                'Tag', 'fiducial', ...
                'ButtonDownFcn', @(src, ~)cb.deleteTaggedElement(src.Parent.Parent, 'fiducial'));
        end
    otherwise
        fprintf(1, 'I have not yet added handling for <strong>evt.Button == %d</strong>!\n', evt.Button);
end

    function tf = check_display_name(obj)
        if isprop(obj, 'DisplayName') % Only if it has this property, must be set
            tf = ~isempty(obj.DisplayName);
        else % Otherwise we don't care, so return true
            tf = true; 
        end
    end

end